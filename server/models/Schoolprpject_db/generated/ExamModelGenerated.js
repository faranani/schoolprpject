/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE examModelGenerated.js PLEASE EDIT ../examModel.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
// Database
import Database from "../../../classes/Database_Schoolprpject_db";
import mongoose, { Schema } from "mongoose";

// Logger
import Logger from "../../../classes/Logger";

const generatedModel = {
  /**
   * Init  schema
   */
  init() {
    const db = Database.getConnection();

    /**
      * exam
      */
    const examSchema = new mongoose.Schema({
      place: {
        type: "String"
      },
      score: {
        type: "Number"
      },
      // RELATIONS
      course: {
        type: Schema.ObjectId,
        ref: "course"
      },
      student: {
        type: Schema.ObjectId,
        ref: "studentName"
      },
      
      // EXTERNAL RELATIONS
      /*
      exam: {
        type: Schema.ObjectId,
        ref: "subject"
      },
      */
    });

    generatedModel.setModel(db.connection.model("Exam", examSchema));

    return examSchema;
  },

  /**
   * Set Model
   */
  setModel: model => {
    generatedModel.model = model;
  },

  /**
   * Get model
   */
  getModel: () => {
    return generatedModel.model;
  },

  // Start queries
    

  // CRUD METHODS


  /**
  * examModel.findBycourse
  *   @description CRUD ACTION findBycourse
  *   @param Objectid key Id of model to search for
  *
  */
  async findBycourse(key) {
    return await generatedModel.model.find({ 'course' : key});
  },
  
  /**
  * examModel.findBystudent
  *   @description CRUD ACTION findBystudent
  *   @param Objectid key Id of model to search for
  *
  */
  async findBystudent(key) {
    return await generatedModel.model.find({ 'student' : key});
  },
  
  /**
  * examModel.list
  *   @description CRUD ACTION list
  *
  */
  async list() {
    return await generatedModel.model.find();
  },
  


};

export default generatedModel;
